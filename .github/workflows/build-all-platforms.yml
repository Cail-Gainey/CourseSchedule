name: Build All Platforms

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Comma separated list of platforms (windows, macos, linux, android, ios). Leave empty for all.'
        required: false
        default: ''
      create_release:
        description: 'Create GitHub release?'
        required: false
        default: "false"

  push:
    tags:
      - 'v*.*.*'
    branches:
      - main
      - master

env:
  PNPM_CACHE_FOLDER: .pnpm-store
  BUILD_PLATFORMS: ${{ github.event.inputs.platforms || 'windows,macos,linux,android,ios' }}
  CREATE_RELEASE: ${{ github.event.inputs.create_release == 'true' || startsWith(github.ref, 'refs/tags/') }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get version
        id: get_version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=dev-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

  build-desktop:
    needs: setup
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            artifact_ext: exe
          - os: macos-latest
            platform: macos
            artifact_ext: dmg
          - os: ubuntu-latest
            platform: linux
            target: AppImage
            artifact_ext: AppImage
          - os: ubuntu-latest
            platform: linux
            target: deb
            artifact_ext: deb
          - os: ubuntu-latest
            platform: linux
            target: rpm
            artifact_ext: rpm
    runs-on: ${{ matrix.os }}
    if: contains(env.BUILD_PLATFORMS, matrix.platform)
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_CACHE_FOLDER }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
      - run: pnpm install --frozen-lockfile

      - name: Build ${{ matrix.platform }}
        run: |
          if [ "${{ matrix.platform }}" = "linux" ]; then
            pnpm run build:linux:${{ matrix.target }}
          else
            pnpm run build:${{ matrix.platform }}
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.target || 'build' }}
          path: dist/*.${{ matrix.artifact_ext }}

  build-android:
    runs-on: ubuntu-latest
    if: contains(env.BUILD_PLATFORMS, 'android')
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - run: pnpm install --frozen-lockfile
      - run: pnpm run build:android

      - name: Setup Android Keystore (optional)
        run: |
          if [ -n "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ] && [ -n "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" ]; then
            echo "üîë Setting up Android Keystore..."
            echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android.keystore
            echo "storeFile=android.keystore" > keystore.properties
            echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> keystore.properties
            echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> keystore.properties
            echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          else
            echo "‚ö†Ô∏è No Android Keystore secrets found, skipping..."
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: android-build
          path: dist/*.apk

  build-ios:
    runs-on: macos-latest
    if: contains(env.BUILD_PLATFORMS, 'ios')
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      - run: pnpm install --frozen-lockfile
      - name: Build iOS app (Debug - No Code Signing)
        run: |
          cd ios/App
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Debug \
            -archivePath build/App-Debug.xcarchive \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            clean archive

      - uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: ios/App/build/*.xcarchive

  release:
    runs-on: ubuntu-latest
    needs: [setup, build-desktop, build-android, build-ios]
    if: env.CREATE_RELEASE == 'true'
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Prepare Release Assets
        run: |
          mkdir -p release
          find artifacts -type f -exec cp {} release/ \;
          ls -lh release/
      - uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.setup.outputs.version }}
          name: Release ${{ needs.setup.outputs.version }}
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
